define(["underscore","q"],function(_,Q){"use strict";return Object.create({},{init:{value:function(a){return this.id=a.id,this.type=a.type||"method",this.name=a.name,this.description=a.description,this.expected=a.expected,this.whenResult=a.whenResult,this.getResult=a.getResult,this.testResult=a.testResult,this.container=document.querySelector('[data-test="'+this.id+'"]'),this.setupDisplay(),this.tests=a.tests,this.propertyName=a.propertyName,this.makeObject=a.makeObject,this.object=a.object,this.method=a.method,this}},showResult:{value:function(a){var b,c=document.createElement("div");b="ok"===a.status?"green":"red",c.innerHTML='<div style="border: 1px '+b+' solid; marginput: 10px 0 0 0;"><div>Type: <span data-field="type">'+a.type+'</span></div><div>Test: <span data-field="id">'+a.id+'</span></div><div>Description: <span data-field="id">'+a.description+'</span></div><div>Subtest: <span data-field="subtest">'+a.subtest+'</span></div><div>Input: <span data-field="status">'+a.input+'</span></div><div>Status: <span data-field="status">'+a.status+'</span></div><div>Elapsed: <span data-field="status">'+a.elapsed+'</span></div><div>Expecting: <span data-field="expected">'+a.expected+'</span></div><div>Actual: <span data-field="result">'+a.actual+'</span></div><div>Message <span data-field="result">'+a.message+"</span></div></div>",this.container.appendChild(c)}},setupDisplay:{value:function(){this.header=document.createElement("div"),this.body=document.createElement("div"),this.footer=document.createElement("div"),this.layout=document.createElement("div"),this.layout.appendChild(this.header),this.layout.appendChild(this.body),this.layout.appendChild(this.footer),this.container.appendChild(this.layout)}},showHeader:{value:function(){var a="";a+='<span class="title" style="font-weight: bold; font-size: 150%;">'+(this.name||"** no name **")+"</span>",a+='<p style="font-style: italic;">'+this.description+"</p>",this.header.innerHTML=a}},showTestLine:{value:function(a){var b=document.createElement("div");b.setAttribute("data-test-id",a.id+"");var c=document.createElement("div"),d="";d+='<span class="test-id" style="font-weight: bold;">Test '+a.id+": </span>",d+="<span>"+a.description||"** no desc **</span>",d+='<span data-item="result" style="margin-left: 2em;"></span>',c.innerHTML=d,b.appendChild(c),this.body.appendChild(b)}},showTestResult:{value:function(a,b){var c=this.body.querySelector('[data-test-id="'+a.id+'"] [data-item="result"]');c&&(c.innerHTML=b),"PASS"===b?c.style.color="green":c.style.color="red"}},showSummary:{value:function(a){var b=document.createElement("div");b.innerHTML="<div>Successes: "+a.succeed+"</div><div>Fails: "+a.fail+"</div><div>Errors: "+a.error+"</div>",this.container.appendChild(b)}},runMethodOutputTest:{value:function(a,b){var c={type:"output",actual:b};return"function"==typeof a.expects.output?(c.expected=a.expects.output.call(this,a),_.isEqual(b,c.expected)?(c.status="success",c.message="output matches expected"):(c.status="failure",c.message="output does not match expected")):"object"==typeof a.expects.output?(c.message=a.expects.output.name,a.expects.output.test.call({},b)?c.status="success":c.status="failure"):(c.expected=a.expects.output,_.isEqual(b,c.expected)?(c.status="success",c.message="output matches expected"):(c.status="failure",c.message="output does not match expected")),c}},runMethodMutationTest:{value:function(a){var b,c={type:"mutation",expected:a.expects.mutation,actual:a.input},d=[],e=[];for(b=0;b<a.input;b+=1)_.isEqual(a.input[b],a.originalInput[b])||d.push(b);if(a.expects.mutation)for(b=0;b<a.input;b+=1)_.isEqual(a.input[b],a.expects.mutation[b])||e.push(b);return d.length>0?a.expects.mutation?0===e.length?(c.status="success",c.message="Muatations were found, and matched the expected mutations"):(c.status="failure",c.message="Mutations were found, but the expectation did not match"):(c.status="failure",c.message="Mutations were made to the input, but were not expected"):a.expects.mutation?0===e.length?(c.status="success",c.message="No mutations, and the expectation was for no change"):(c.status="failure",c.message="No mutations found, but were expected"):(c.status="success",c.message="No mutations found, none expected"),c}},exceptionMatch:{value:function(ex,test){if("string"==typeof ex&&ex===test)return!0;var type=eval(test.type);return ex instanceof type&&ex.message===test.message?!0:!1}},runMethodExceptionTest:{value:function(a,b){var c={type:"exception",expected:a.expects.exception,actual:b};return void 0!==b?a.expects.exception?this.exceptionMatch(b,a.expects.exception)?(c.status="success",c.message="exception encountered, and it matches the expectation"):(c.status="failure",c.message="exception encountered, and it fails the expectation"):(c.status="failure",console.log("EX"),console.log(b),c.message="test not supplied, but exception encountered"):a.expects.exception?(c.status="failure",c.message="test supplied, but no exception encountered"):(c.status="success",c.message="no exception encountered, and non expected"),c}},runMethodTest:{value:function(a){var b=a.whenResult||this.whenResult;return Q.Promise(function(c){var d=new Date;b(a).then(function(b){var e=[];e.push(this.runMethodOutputTest(a,b)),a.ignoreMutation||e.push(this.runMethodMutationTest(a)),a.result.results=e;var f=(new Date).getTime()-d.getTime();a.elapsed=f,c(a)}.bind(this))["catch"](function(b){a.result.results=[this.runMethodExceptionTest(a,b)];var e=(new Date).getTime()-d.getTime();a.elapsed=e,c(a)}.bind(this)).done()}.bind(this))}},getObject:{value:function(){var a;return a=this.makeObject?this.makeObject():this.object}},runPropertyComparisonTest:{value:function(a,b){var c;return c=_.isEqual(a.expects.propertyValue,b)?"success":"failure",{expected:a.expectedValue,actual:b,status:c}}},runPropertyTest:{value:function(a){var b=this.getObject()[this.propertyName];return[this.runPropertyComparisonTest(a,b)]}},runTest:{value:function(a){switch(this.type){case"property":return this.runPropertyTest(a);case"method":var b=this.runMethodTest(a);return b;default:return this.runMethodTest(a)}}},runTests:{value:function(){var a=0,b={succeed:0,fail:0,error:0,unknown:0};this.showHeader(this.name),this.tests.forEach(function(b){a+=1,b.id=a,b.result={id:a,start:new Date,status:"pending"},b.object=this.getObject(),b.whenTest=this.runTest(b),this.showTestLine(b)}.bind(this)),Q.allSettled(this.tests.map(function(a){return a.whenTest})).then(function(a){a.forEach(function(a){var b=a.value;if("fulfilled"===a.state){var c=!1;b.result.results.forEach(function(a){var d=b.expects.status||"success";d!==a.status&&(c=!0,this.showResult({id:this.id,type:this.type,tester:this.description,description:b.description,status:a.status,elapsed:b.elapsed,input:JSON.stringify(b.input),expected:JSON.stringify(a.expected),actual:JSON.stringify(a.actual),subtest:a.type,message:"Expected test result of "+d+", but got "+a.status+"."+a.message}))}.bind(this)),c?(b.status="fail",this.showTestResult(b,"fail")):(b.status="success",this.showTestResult(b,"PASS"))}else b.status="error",this.showResult({id:this.id,type:this.type,description:this.description,status:"error",message:"Error thrown running the test: "+err.message})}.bind(this)),a.forEach(function(a){"success"===a.value.status?b.succeed+=1:"fail"===a.value.status?b.fail+=1:"error"===a.value.status?b.error+=1:b.unknown+=1}),this.showSummary(b)}.bind(this))["catch"](function(a){console.log("ERROR"),console.log(a)}).done()}}})});