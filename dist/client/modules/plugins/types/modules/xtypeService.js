define(["promise","kb_types_typeManager","kb_plugin_types","require"],function(a,b,c,d){"use strict";function e(e){function f(){return new a(function(a){d(["yaml!"+c.plugin.path+"/data_types.yml"],function(c){j=b.make({runtime:e.runtime,typeDefs:c}),console.log("created type manager"),a()})})}function g(){return!0}function h(b){return b?(console.log(),a.all(b.map(function(b){var c=b.type,d=b.viewers,e=b.icon;e&&j.setIcon(c,e),d.forEach(function(b){return new a(function(a,d){try{j.addViewer(c,b),a()}catch(e){console.log("ERROR in plugin handler for type service"),console.log(e),d(e)}})})}))):void 0}function i(a,b,c){if(!a[b])throw{type:"UndefinedMethod",reason:"MethodUndefinedOnObject",message:'The requested method "'+b+'" does not exist on this object',suggestion:"This is a developer problem, not your fault",data:{methodName:b}};return a[b].apply(a,c)}var j;e.runtime;return{start:f,stop:g,pluginHandler:h,getViewer:function(){return i(j,"getViewer",arguments)},parseTypeId:function(){return i(j,"parseTypeId",arguments)},getIcon:function(){return i(j,"getIcon",arguments)},makeVersion:function(){return i(j,"makeVersion",arguments)},makeTypeId:function(){return i(j,"makeTypeId",arguments)},hasType:function(){return i(j,"hasType",arguments)}}}return{make:function(a){return e(a)}}});