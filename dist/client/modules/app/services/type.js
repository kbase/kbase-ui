define(["promise","kb/common/typeManager"],function(a,b){"use strict";function c(c){function d(){return a["try"](function(){return!0})}function e(){return a["try"](function(){return!0})}function f(b){return b?a.all(b.map(function(b){var c=b.type,d=b.viewers,e=b.icon;e&&i.setIcon(c,e),d&&d.forEach(function(b){return new a(function(a,d){try{i.addViewer(c,b),a()}catch(e){console.log("ERROR in plugin handler for type service"),console.log(e),d(e)}})})})):void 0}function g(a,b,c){if(!a[b])throw{name:"UndefinedMethod",message:'The requested method "'+b+'" does not exist on this object',suggestion:"This is a developer problem, not your fault"};return a[b].apply(a,c)}var h=c.runtime,i=b.make({runtime:h,typeDefs:{}});return{start:d,stop:e,pluginHandler:f,getViewer:function(){return g(i,"getViewer",arguments)},parseTypeId:function(){return g(i,"parseTypeId",arguments)},getIcon:function(){return g(i,"getIcon",arguments)},getColor:function(){return g(i,"getColor",arguments)},makeVersion:function(){return g(i,"makeVersion",arguments)},makeTypeId:function(){return g(i,"makeTypeId",arguments)},makeType:function(){return g(i,"makeType",arguments)},hasType:function(){return g(i,"hasType",arguments)}}}return{make:function(a){return c(a)}}});