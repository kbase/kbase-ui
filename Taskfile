#!/bin/bash

#
# PRIVATE
#

#
# _run-dc name command...
#
# Runs docker compose with the given docker compose filename suffix with the given command arguments
#
# function _run-dc {
#   docker compose -f "etc/docker-compose-${1}.yml" --project-directory "${PWD}" --project-name orcidlink run --rm orcidlink "${@:2}"
# }

# function _dc-up {
#   docker compose -f "etc/docker-compose-${1}.yml" --project-directory "${PWD}" --project-name orcidlink up
# }

function _noop {
    echo "Not implemented yet"
}

#
# PUBLIC
#

function alias-me {
    alias run="${PWD}/Taskfile"
}

function install-plugins {
	bash tools/deno/scripts/install-plugins.sh "${1}" 
}

function install-plugin {
	bash tools/deno/scripts/install-plugin.sh "${1}" 
}

function git-info {
    bash tools/deno/scripts/git-info.sh
}

function build-info {
	bash tools/deno/scripts/build-info.sh
}

function prepare-build {
    bash scripts/host/prepare-build.sh
}

function create-deploy {
    bash scripts/host/create-deploy.sh
}

function build {
    env DIR="${PWD}/vite-app" BASE_PATH="${BASE_PATH}" bash scripts/host/build.sh
}

function shell {
    env DIR="${PWD}" bash scripts/host/shell.sh
}

function test {
    env DIR="${PWD}/vite-app" bash scripts/host/test.sh
}

# 
# Build
#

#
# Sets up the project for either development or image-building
#
function setup-for-build-or-dev {
    prepare-build
    git-info
    build-info
    install-plugins
}

#
# Prepare a build for an image
# After this is complete, everything will be in place for the image
# to be built.
#
function build-kbase-ui {
    setup-for-build-or-dev
    build
    create-deploy
}

#
# Prepare project for development.
# After this is complete, the repo is ready for live development
#
function dev-setup {
    setup-for-build-or-dev
    render-templates
}

#
# Tasks we need to run prior to commits, etc. 
#

function format {
    _noop
}


# Creates environment variables required for the local development proxy.
# See "create-proxy-env-vars.bash", which documents the required and optional input
# environment variables, as well as the generated ones.
# Saves the environment variables into an env file in .devcontainer/proxy-env
function generate-proxy-env {
    # ./scripts/host/generate-proxy-env.bash
    # DIR="${PWD}" && cd tools/node && docker compose -f run --rm node-tool echo
    # "Network Created"
    DIR="${PWD}" \
    docker compose \
        -f tools/node/docker-compose.yml \
        -p kbase-dev \
    run \
        -e DIR="${PWD}" \
        -e DEPLOY_ENV \
        -e BASE_PATH \
        -e KBASE_UI_HOSTNAME \
        -e SERVICE_PROXIES \
        -e DYNAMIC_SERVICE_PROXIES \
        -e SERVICES_DOMAIN \
        -e KBASE_UI_HOST \
        -e KBASE_UI_PORT \
        -e NARRATIVE_HOST \
        -e NARRATIVE_PORT \
        -e EUROPA_UI_HOST \
        -e EUROPA_UI_PORT \
        --rm \
    node-tool ./scripts/container/generate-proxy-env
}

function generate-runtime-env {
    DIR="${PWD}" \
    docker compose \
        -f tools/node/docker-compose.yml \
        -p kbase-dev \
    run \
        -e DEPLOY_ENV \
        -e BASE_PATH \
        -e UI_DOMAIN \
        -e KBASE_UI_HOSTNAME \
        -e FEATURE_SWITCHES_ENABLED \
        -e FEATURE_SWITCHES_DISABLED \
        -e DEFAULT_PATH \
        -e DEFAULT_PATH_TYPE \
        -e KBASE_ENDPOINT \
        --rm \
    node-tool ./scripts/container/generate-runtime-env
}

function generate-runtime-config {
    generate-runtime-env
    DIR="${PWD}" tools/dockerize/scripts/render-templates.sh
}

function remove-proxy-container {
    docker rm $(docker ps -a --no-trunc --format="{{.ID}}" --filter name=^/kbase-ui-proxy$)
}

# Renders the proxy server config file into build/deploy/proxy-nginx.conf
# Depends upon the proxy env variables existing in .devcontainer/proxy.env
# Use ./Taskfile generate-proxy-env.
# This is useful for previwing the development proxy nginx config, especially when
# making changes to it.
function render-proxy-config {
    DIR="${PWD}" ENV_FILE="${PWD}/.devcontainer/proxy.env" tools/dockerize/scripts/render-proxy-configs.sh
}

# Optional dev tooling:

function generate-dev-cert {
    env bash tools/make-dev-cert.sh
}

function remove-dev-cert {
    rm tools/proxy/contents/ssl/*
}

function start-local-server {
	docker compose up
    docker compose rm -f
}

function build-image {
    ./scripts/host/build-image.sh
}

function run-image {
    ./scripts/host/run-image.sh
}

function run-proxy {
    ./scripts/host/run-proxy.sh
}

function create-docker-network {
    DIR="${PWD}" && cd tools/node && docker compose -f run --rm node-tool echo "Network Created"
    #!/usr/bin/env bash

    # DIR="${PWD}" docker compose -f tools/node/docker-compose.yml run --rm node-tool "$@"
}

#
# TO PORT
#

# docker-network:
# 	@:$(call check_defined, net, "the docker custom network: defaults to 'kbase-dev'")
# 	bash tools/docker/create-docker-network.sh $(net)

# docker-ignore:
# 	@echo "> Syncing .dockerignore from .gitignore"
# 	@$(TOPDIR)/node_modules/.bin/dockerignore
# docker-network-clean:
# 	# @:$(call check_defined, net, "the docker custom network: defaults to 'kbase-dev'")
# 	bash tools/docker/clean-docker-network.sh

# get-gitlab-config: 
# 	mkdir -p dev/gitlab-config; \
# 	# git clone -b develop ssh://git@gitlab.kbase.us/devops/kbase_ui_config.git dev/gitlab-config
#   git clone -b develop https://gitlab.kbase.us/devops/kbase_ui_config.git
#   dev/gitlab-config
# # check_defined variable-name message
# # Ensures that the given variable 'variable-name' is defined; if not
# # prints 'message' and the process exits with 1.
# # thanks https://stackoverflow.com/questions/10858261/abort-makefile-if-variable-not-set
# check_defined = \
#     $(strip $(foreach 1,$1, \
#         $(call __check_defined,$1,$(strip $(value 2)))))
# __check_defined = \
#     $(if $(value $1),, \
#         $(error Undefined "$1"$(if $2, ($2))$(if $(value @), \
#                 required by target `$@')))

function help {
    echo "$0 <task> <args>"
    echo "Runs the tasks listed below."
    echo "To find out more about them, either read the source"
    echo "for ${0} or the docs located in 'docs/tasks.md'."
    echo "Tasks:"
    # Note that this omits private functions - those prefixed with an _
    compgen -A function | grep -e '^[^_]' | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time "${@:-help}"
