FROM node:16

RUN apt-get update && \
    apt-get install -y npm python3 git make bash && \
    npm install --location=global npm@8.12.2

# RUN apk upgrade --update-cache --available && \
#     apk add --update --no-cache npm python3 make bash && \
#     mkdir -p /kb

# WORKDIR /kb

# This version uses master; otherwise functionally equivalent other than style.
# RUN version=v0.15.1 && \
#     wget -O - https://github.com/powerman/dockerize/releases/download/${version}/dockerize-`uname -s`-`uname -m` | install /dev/stdin /usr/local/bin/dockerize && \
#     mkdir -p /kb/deployment/app && \
#     mkdir -p /kb/deployment/templates && \
#     mkdir -p /kb/deployment/scripts

# These ARGs values are passed in via the docker build command
# ARG BUILD_DATE
# ARG VCS_REF
# ARG BRANCH=develop
# ARG TAG

# The main thing -- the kbase-ui built code.
# Copies entire react-app since we will be developing directly with it.
# However, we will also volume mount it!
# TODO: can we remove this copy, please??
# COPY react-app /kb/deployment/app

# # Config templates
# COPY deployment/templates /kb/deployment/templates

# # Deployment-time scripts
# COPY deployment/scripts /kb/deployment/scripts

# Need to include the integration tests since otherwise we need a local build
# to pick them up.
# COPY --from=builder /kb/build/test /kb/deployment/services/kbase-ui/test

# The BUILD_DATE value seem to bust the docker cache when the timestamp changes, move to
# the end
# LABEL org.label-schema.build-date=$BUILD_DATE \
#     org.label-schema.vcs-url="https://github.com/kbase/kbase-ui.git" \
#     org.label-schema.vcs-ref=$COMMIT \
#     org.label-schema.schema-version="1.0.0-rc1" \
#     us.kbase.vcs-branch=$BRANCH  \
#     us.kbase.vcs-tag=$TAG \
#     maintainer="Erik Pearson eapearson@lbl.gov"

# # Run as a regular user, not root.
# RUN addgroup --system kbmodule && \
#     adduser --system --ingroup kbmodule kbmodule && \
#     chown -R kbmodule:kbmodule /kb

# RUN cd /kb/deployment/app && npm ci

# ENTRYPOINT ["/kb/deployment/scripts/start-dev-server.bash"]
# ENTRYPOINT ["sh"]

# ENTRYPOINT [ "dockerize" ]

# CMD [  \
#     "-template", "/kb/deployment/templates/config.json.tmpl:/kb/deployment/app/public/deploy/config.json", \
#     "bash", "/kb/deployment/scripts/start-dev-server.bash" ]
