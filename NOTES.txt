LEft off here ...
trying to get the developer workflow w/in a container working.
if the modules/plugins is populated before starting, the volume mount doesn't overwrite the internal one
if the internal one is removed, I can see the volume mounted one, but loading plugins goes into an infinite loop.

I'm thinking of doing a probe for the plugin's presence before mounting.


Okay, local developer workflow is working fine now.

Now ... work on the config..

config now lives in /kb/deployment/deploy/config

All deploy artifacts which can be overridden should be placed in "deploy". 
This facilitates local development, and presumably deployment as well.

extract git info for each plugin 
place in plugins.json
note that this should be simulated in the local proxy plugins - 
which means that the plugin gitinfo should be created during the plugin install
process and left as a manifest in the plugin directory.

main config is created by dockerize and the gitlab config

build info for kbase-ui itself will be placed into deploy/build.json

---

trying local development workflow via devcontainers.

this is tricky as it will require usage of docker compose in order to orchestrate the service and deploy proxies.

I couldn't find a way to connect the regular devcontainer to an external docker network, which would be fine, for now at least.

However, supposedly devcontainers can use an external docker compose, though my initial experiments didn't work.

Next is to create a devcontainer from scratch indicating a docker compose fie.

The main container needs to provide the node runtime, and that is all. THe devcontainer does it's IDE integration thing, and mounts a volume into the hosted repo.

THen the developer can cd into react-app and do whatever, like starting the dev server, just like normal.

The proxy within the react app, as well as the external proxy containers, should do the rest.

Next problem is the proxy won't start without the upstream kbase-ui running.

There are suggestions for handling this with nginx (though it is stupid that nginx does not provide an option to avoid this).

They feel fairly hackish, but I'll try.

ALternatives:

- dont' proxy to https://ci.kbase.us for the ui, use localhost:3000 or whatever. This requires just disabling kbase-ui proxying 

    - the only downside is that integration with other uis will fail (narrative, navigator, auth service), but would allow hacking on kbase-ui.

How about we try the above, and after that works, get the kbase-ui proxy working again with some tom foolery.

One idea is to launch a mini-server for 10s or so, enough so that nginx can ping it up on startup.

That mini-server can be included in the upstream configuration. Later, when the dev server is started and it is hit with the browser, nginx will do round robin for upstream servers, skipping over the now-down bootstrap service.

Or set ANYTHING as a backup service... Hmm...

Another is to find a different proxy - proxying is not that difficult.

But we do need to proxy to kbase-ui because the dev server can't do that for us?? Unless it can?? Nah, there are a few tricks in the nginx config.

OKAY.

Another glitch.

devcontainers do not work with alpine-based containers.

what a drag.

OKAY!

Got it done.

make start-dev-server

The secret sauce is setupProxy.

There are multiple paths that need to be handled. See the file.

These paths, in some cases, need to be handled in the kbase-ui nginx config as well.


NOW for deployment:

first run `make` (make all) to build the app, download plugins, assemble it all in `build`.

then create the image with `make build-image`.

this won't work quite yet, after our build refactor.

TODO:

so the build directory looks like

```text
build
  dist 
  plugins
```

THe plugins are not in the app itself, so nginx needs to be configured to route /modules/plugins to /kb/deployment/plugins

Still relies on dynamicall creating a  docker-compose override file. 

make build-docker-compose-override 

works for creating it standalone

so then run 

make start-local-server

which should .... work ....

it cds into dev, then runs the container defined ther, including the override created above.

And now it does!

So ...

For local running of the production service:

make
make build-docker-compose-override
make build-image
make start-local-server 

